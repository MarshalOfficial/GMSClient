@page "/customerprofileadd/{customerid}"
@layout MainLayout

@inject NavigationManager navigationManager
@inject StateContainer stateContainer

<center>
    <EditForm Model="@customerPeriodicCheckup" OnValidSubmit="CreateCustomerPeriodicCheckup">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <br />
        </div>
        <div class="col-12 row">
            <input class="form-control col-12" @bind="customerPeriodicCheckup.RegDateFa" placeholder="تاریخ ثبت مثلا 1399/09/01" pattern="[0-9]{4}/(0[1-9]|1[012])/(0[1-9]|1[0-9]|2[0-9]|3[01])" data-valid-example="1399/09/01" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.Height" placeholder="قد" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.Weight" placeholder="وزن" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.WaistSize" placeholder="دور کمر" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.Chest" placeholder="قفسه سینه" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.ABS" placeholder="دور شکم" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.BUTT" placeholder="دور باسن" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.RightArm" placeholder="بازوی راست" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.LeftArm" placeholder="بازوی چپ" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.RightThigh" placeholder="ران راست" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.LeftThigh" placeholder="ران چپ" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.RightCalves" placeholder="ساق راست" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="number" class="form-control col-12" @bind="customerPeriodicCheckup.LeftCalves" placeholder="ساق چپ" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="submit" class="form-control col-12 btn btn-primary" value="ثبت" />
        </div>
        <div class="col-12 row">
            <button type="button" class="form-control col-12 btn btn-primary" value="انصراف" @onclick="Cancel">انصراف</button>
        </div>
        <br />
        <div class="col-12 row" style="text-align:left; font-weight:bold">
            <span class="col-12">@BackendMesssage</span>
        </div>
    </EditForm>
</center>



@code {
    [Parameter]
    public string CustomerID { get; set; }
    private string BackendMesssage;
    private CustomerPeriodicCheckup customerPeriodicCheckup;

    protected async override Task OnInitializedAsync()
    {
        customerPeriodicCheckup = new CustomerPeriodicCheckup();
        if (string.IsNullOrWhiteSpace(stateContainer.Token))
        {
            navigationManager.NavigateTo("/");
        }
    }

    private async Task<bool> CreateCustomerPeriodicCheckup()
    {
        customerPeriodicCheckup.AccountID = CustomerID.ToLong();
        var jsondata = JsonConvert.SerializeObject(customerPeriodicCheckup);

        var data = BackendEngine.Call("ClientPeriodicCheckupUpdate", jsondata, stateContainer.Token);

        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
            BackendMesssage = msg;
        else
            navigationManager.NavigateTo("/customerprofile/" + CustomerID);

        return await Task.FromResult(true);
    }

    private async void Cancel()
    {
        navigationManager.NavigateTo("/customerprofile/" + CustomerID);
    }
}
