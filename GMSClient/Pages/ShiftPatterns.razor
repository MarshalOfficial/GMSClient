@page "/shiftpatterns"
@layout MainLayout

@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@inject NotificationService notificationService
@inject DialogService dialogService

<h1>تنظیم الگوی شیفتها</h1>
@if (shiftPatternHeaders == null)
{
<p><em>Loading...</em></p> }
else
{

<EditForm Model="@shiftPatternHeaderobj" OnValidSubmit="UpdateRecord">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-row">
        <div class="col-md-4 mb-3">
            <input class="form-control" @bind="shiftPatternHeaderobj.Title" placeholder="عنوان" />
            <div class="mr-1">
                <button type="submit" class=" btn btn-success" value="ثبت">ثبت/ویرایش</button>
                <button type="button" class=" btn btn-danger mr-2 px-1" @onclick="ClearValue">خالی کردن مقدار</button>
            </div>

        </div>
    </div>
    <br />
</EditForm>


                <div class="table-responsive">
                    <table class="table table-hover" style="table-layout: auto; width: 100%; ">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">عنوان</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in shiftPatternHeaders)
                            {
            <tr>
                <td>
                    @item.Title
                </td>
                <td>
                    <button class="btn btn-dark py-1 my-1" @onclick="@(e => LoadForUpdate(item.ID))">ویرایش</button>
                    <button class="btn btn-dark py-1 my-1" @onclick="@(e => ShowDeleteDialog(item.ID))">حذف</button>
                    <button class="btn btn-dark py-1 my-1" @onclick="@(e => ShowPatternConfig(item.ID))">تنظیم ساعت ها</button>
                </td>
            </tr>}
                        </tbody>
                    </table>
                </div>}


@code { private ShiftPatternHeader shiftPatternHeaderobj;
    private ShiftPatternHeader[] shiftPatternHeaders;
    private string BackendMesssage;

    protected override void OnInitialized()
    {
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(stateContainer.Token))
        {
            navigationManager.NavigateTo("/");
        }

        LoadData();

    }

    private async Task LoadData()
    {
        shiftPatternHeaderobj = new ShiftPatternHeader();

        var data = BackendEngine.Call("ShiftPatternHeaderGetAll", "{}", stateContainer.Token);


        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
        {
            BackendMesssage = msg;
            await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = BackendMesssage, Duration = 4000 });
        }
        else
            shiftPatternHeaders = JsonConvert.DeserializeObject<ShiftPatternHeader[]>(data);
    }

    private async void ShowPatternConfig(long id)
    {
        navigationManager.NavigateTo("/shiftpatternconfig/" + id.ToString());
    }

    private async void LoadForUpdate(long id)
    {
        shiftPatternHeaderobj = shiftPatternHeaders.FirstOrDefault(l => l.ID == id);
    }

    private async void ClearValue()
    {
        shiftPatternHeaderobj = new ShiftPatternHeader();
    }


    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }


    void Close(dynamic result)
    {
        if(result != null && ((object)result).ToLong() > 0)
        {
            DeleteRecord(((object)result).ToLong());
        }
        StateHasChanged();
    }

    private async Task DeleteRecord(long id)
    {
        shiftPatternHeaderobj = shiftPatternHeaders.FirstOrDefault(l => l.ID == id);
        var jsondata = JsonConvert.SerializeObject(shiftPatternHeaderobj);

        var data = BackendEngine.Call("ShiftPatternHeaderDelete", jsondata, stateContainer.Token);

        await ProcessBackendResultData(data);
    }

    async Task ShowDeleteDialog(long id) => await dialogService.OpenAsync("حذف می شود", ds =>
    @<RadzenCard Style="padding: 20px;">
         <p Style="margin-bottom: 10px;">آیا اطمینان دارید؟</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="بله" Click="()=> ds.Close(id)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="خیر" Click="()=> ds.Close(0)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);
        

private async Task UpdateRecord()
{
var jsondata = JsonConvert.SerializeObject(shiftPatternHeaderobj);

var data = BackendEngine.Call("ShiftPatternHeaderUpdate", jsondata, stateContainer.Token);

await ProcessBackendResultData(data);

}


private async Task ProcessBackendResultData(string data)
{
var msg = data.GetBackendErrorMsg();
if (msg.Length > 0)
{
BackendMesssage = msg;
await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = BackendMesssage, Duration = 4000 });
}
else
{
await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = Extensions.SucceedMessage, Duration = 4000 });
await LoadData();
}
}


async Task ShowNotification(NotificationMessage message)
{
notificationService.Notify(message);
await InvokeAsync(() => { StateHasChanged(); });
}}
