@page "/shiftpatterns"
@layout MainLayout

@inject NavigationManager navigationManager
@inject StateContainer stateContainer

<h1>تنظیم الگوی شیفتها</h1>
@if (shiftPatternHeaders == null)
{
<p><em>Loading...</em></p>
<span class="col-12">@BackendMesssage</span> }
else
{
<EditForm Model="@shiftPatternHeaderobj" OnValidSubmit="UpdateRecord">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-row">
        <div class="col-md-4 mb-3">
            <input class="form-control" @bind="shiftPatternHeaderobj.Title" placeholder="عنوان" />
            <div class="mr-1"><button type="submit" class=" btn btn-success" value="ثبت">ثبت/ویرایش</button>
                              <button type="button" class=" btn btn-danger mr-2 px-1" @onclick="ClearValue">خالی کردن مقدار</button>
            </div>
            
        </div>
        <div class="col-12 row" style="text-align:right; font-weight:bold">
            <span class="col-12">@BackendMesssage</span>
        </div>
    </div>
    <br />
</EditForm>


                <div class="table-responsive">
                    <table class="table table-hover" style="table-layout: auto; width: 100%; ">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">عنوان</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in shiftPatternHeaders)
                            {
                            <tr>
                                <td>
                                    @item.Title
                                </td>
                                <td>
                                    <button class="btn btn-dark py-1 my-1" @onclick="@(e => LoadForUpdate(item.ID))">ویرایش</button>
                                    <button class="btn btn-dark py-1 my-1" @onclick="@(e => DeleteRecord(item.ID))">حذف</button>
                                    <button class="btn btn-dark py-1 my-1" @onclick="@(e => ShowPatternConfig(item.ID))">تنظیم ساعت ها</button>
                                </td>
                            </tr>
}
                        </tbody>
                    </table>
                </div>}



@code {
    private ShiftPatternHeader shiftPatternHeaderobj;
    private ShiftPatternHeader[] shiftPatternHeaders;
    private string BackendMesssage;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(stateContainer.Token))
        {
            navigationManager.NavigateTo("/");
        }

        LoadData();

    }

    private void LoadData()
    {
        shiftPatternHeaderobj = new ShiftPatternHeader();

        var data = BackendEngine.Call("ShiftPatternHeaderGetAll", "{}", stateContainer.Token);


        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
            BackendMesssage = msg;
        else
            shiftPatternHeaders = JsonConvert.DeserializeObject<ShiftPatternHeader[]>(data);
    }

    private async void ShowPatternConfig(long id)
    {
        navigationManager.NavigateTo("/shiftpatternconfig/" + id.ToString());
    }

    private async void LoadForUpdate(long id)
    {
        shiftPatternHeaderobj = shiftPatternHeaders.FirstOrDefault(l => l.ID == id);
    }

    private async void ClearValue()
    {
        shiftPatternHeaderobj = new ShiftPatternHeader();
    }

    private async Task<bool> DeleteRecord(long id)
    {
        shiftPatternHeaderobj = shiftPatternHeaders.FirstOrDefault(l => l.ID == id);
        var jsondata = JsonConvert.SerializeObject(shiftPatternHeaderobj);

        var data = BackendEngine.Call("ShiftPatternHeaderDelete", jsondata, stateContainer.Token);

        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
            BackendMesssage = msg;
        else
            LoadData();

        return await Task.FromResult(true);
    }

    private async Task<bool> UpdateRecord()
    {
        var jsondata = JsonConvert.SerializeObject(shiftPatternHeaderobj);

        var data = BackendEngine.Call("ShiftPatternHeaderUpdate", jsondata, stateContainer.Token);

        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
            BackendMesssage = msg;
        else
            LoadData();

        return await Task.FromResult(true);
    } }
