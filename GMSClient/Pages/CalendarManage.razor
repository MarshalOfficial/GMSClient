@page "/calendarmanage"
@layout MainLayout

@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@inject NotificationService notificationService
@inject DialogService dialogService

<h1>تنظیم تقویم کاری</h1>
<EditForm Model="@dateTimeRef" OnValidSubmit="Search">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-row">
        <div class="col-md-4 mb-3">
            <input class="form-control" @bind="dateTimeRef.MonthShName" placeholder="ماه" />
            <div class="mr-1">
                <button type="submit" class=" btn btn-success" value="ثبت">جستجو</button>
            </div>

        </div>
    </div>
    <br />
</EditForm>

<div class="table-responsive">
    <table class="table table-hover" style="table-layout: auto; width: 100%; ">
        <thead class="thead-dark">
            <tr>
                <th scope="col">تاریخ</th>
                <th scope="col">روز</th>                
            </tr>
        </thead>
        <tbody>
            @foreach (var item in dateTimeReflst)
            {
            <tr>
                <td>
                    @item.DateSh
                </td>
                <td>
                    @item.WeekDayShName
                </td>
            </tr>
}
        </tbody>
    </table>
</div>


@code { private DateTimeRef[] dateTimeReflst;
    private DateTimeRef dateTimeRef;
    private string BackendMesssage;
    private ShiftPatternHeader[] shiftPatternHeaders;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(stateContainer.Token))
        {
            navigationManager.NavigateTo("/");
        }

        dateTimeReflst = new DateTimeRef[] {};
        dateTimeRef = new DateTimeRef();


        var data = BackendEngine.Call("ShiftPatternHeaderGetAll", "{}", stateContainer.Token);


        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
        {
            BackendMesssage = msg;
            await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = BackendMesssage, Duration = 4000 });
        }
        else
            shiftPatternHeaders = JsonConvert.DeserializeObject<ShiftPatternHeader[]>(data);

    }

    private async Task Search()
    {
        var param = "{" + string.Format("\"{0}\": \"{1}\"", "month", dateTimeRef.MonthShName) + "}";

        var data = BackendEngine.Call("DateRefGetAll", param, stateContainer.Token);


        var msg = data.GetBackendErrorMsg();
        if (msg.Length > 0)
        {
            BackendMesssage = msg;
            await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = BackendMesssage, Duration = 4000 });
        }
        else
            dateTimeReflst = JsonConvert.DeserializeObject<DateTimeRef[]>(data);
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    } }
